basePath: /api/v1
definitions:
  dto.AppointmentRes:
    properties:
      appointment_date:
        type: string
      clinic_id:
        type: integer
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      patient_email:
        type: string
      queue_number:
        type: integer
      status:
        type: string
      updated_at:
        type: string
    type: object
  dto.ClinicReq:
    properties:
      address:
        minLength: 5
        type: string
      name:
        maxLength: 50
        minLength: 6
        type: string
      phone:
        maxLength: 13
        minLength: 6
        type: string
      slot:
        minimum: 1
        type: integer
    required:
    - address
    - name
    - phone
    - slot
    type: object
  dto.ClinicRes:
    properties:
      address:
        type: string
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      phone:
        type: string
      slot:
        type: integer
      updated_at:
        type: string
    type: object
  dto.ClinicUpdateReq:
    properties:
      address:
        minLength: 5
        type: string
      name:
        maxLength: 50
        minLength: 6
        type: string
      phone:
        maxLength: 13
        minLength: 6
        type: string
      slot:
        minimum: 1
        type: integer
    type: object
  dto.ConfirmAppointmentReq:
    properties:
      price:
        minimum: 10000
        type: integer
    required:
    - price
    type: object
  dto.CreateAppointmentReq:
    properties:
      appointment_date:
        type: string
      clinic_id:
        type: integer
      description:
        type: string
    required:
    - appointment_date
    - clinic_id
    - description
    type: object
  dto.CreateAppointmentRes:
    properties:
      appointment_date:
        type: string
      clinic_id:
        type: integer
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      patient_email:
        type: string
      queue_number:
        type: integer
      status:
        type: string
      updated_at:
        type: string
    type: object
  dto.EmployeeLoginReq:
    properties:
      password:
        maxLength: 20
        minLength: 5
        type: string
      username:
        maxLength: 20
        minLength: 5
        type: string
    required:
    - password
    - username
    type: object
  dto.EmployeeRegisterReq:
    properties:
      password:
        maxLength: 20
        minLength: 5
        type: string
      username:
        maxLength: 20
        minLength: 5
        type: string
    required:
    - password
    - username
    type: object
  dto.ErrWebResponse:
    properties:
      code:
        type: integer
      detail: {}
      status:
        type: string
    type: object
  dto.FullAppointmentRes:
    properties:
      appointment_date:
        type: string
      clinic_id:
        type: integer
      created_at:
        type: string
      description:
        type: string
      employee_username:
        type: string
      id:
        type: integer
      patient_email:
        type: string
      price:
        type: integer
      queue_number:
        type: integer
      status:
        type: string
      updated_at:
        type: string
    type: object
  dto.SwCancelAppointmentRes:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/dto.AppointmentRes'
      status:
        type: string
    type: object
  dto.SwCreateAppointmentRes:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/dto.CreateAppointmentRes'
      status:
        type: string
    type: object
  dto.SwCreateClinicRes:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/dto.ClinicRes'
      status:
        type: string
    type: object
  dto.SwDeleteClinicRes:
    properties:
      code:
        type: integer
      data:
        type: string
      status:
        type: string
    type: object
  dto.SwFinByEmailAppointmentRes:
    properties:
      code:
        type: integer
      data:
        items:
          $ref: '#/definitions/dto.FullAppointmentRes'
        type: array
      status:
        type: string
    type: object
  dto.SwListClinicRes:
    properties:
      code:
        type: integer
      data:
        items:
          $ref: '#/definitions/dto.ClinicRes'
        type: array
      status:
        type: string
    type: object
  dto.SwLoginRes:
    properties:
      code:
        type: integer
      data:
        type: string
      status:
        type: string
    type: object
  dto.SwUserRegisterRes:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/dto.UserResponse'
      status:
        type: string
    type: object
  dto.UserLoginReq:
    properties:
      email:
        type: string
      password:
        maxLength: 32
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  dto.UserRegisterReq:
    properties:
      address:
        maxLength: 128
        minLength: 8
        type: string
      birth:
        maxLength: 10
        minLength: 10
        type: string
      email:
        type: string
      gender:
        maxLength: 6
        minLength: 4
        type: string
      name:
        maxLength: 32
        minLength: 3
        type: string
      password:
        maxLength: 32
        minLength: 6
        type: string
      phone:
        maxLength: 13
        minLength: 10
        type: string
    required:
    - address
    - birth
    - email
    - gender
    - name
    - password
    - phone
    type: object
  dto.UserResponse:
    properties:
      address:
        type: string
      birth:
        type: string
      email:
        type: string
      gender:
        type: string
      name:
        type: string
      phone:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: zicare@mail.com
    name: Zi.Care
    url: www.zicare.com
  description: Application for managing clinic data and appointments
  license:
    name: Apache 2.0
  title: Zi.Care Clinic - API Documentation
  version: BETA
paths:
  /appointment:
    post:
      consumes:
      - application/json
      description: Create a new appointment for the logged in patient. You will need
        an 'Authorization' cookie attached with this request.
      parameters:
      - description: Appointment details
        in: body
        name: appointmentRequest
        required: true
        schema:
          $ref: '#/definitions/dto.CreateAppointmentReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.SwCreateAppointmentRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrWebResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrWebResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dto.ErrWebResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrWebResponse'
      summary: Create appointment (patient only)
      tags:
      - Appointment
  /appointment/{id}:
    get:
      consumes:
      - application/json
      description: Find appointment by appointment ID. You will need an 'Authorization'
        cookie attached with this request.
      parameters:
      - description: Appointment ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SwCancelAppointmentRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrWebResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrWebResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrWebResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrWebResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrWebResponse'
      summary: Find By ID (owner and admin)
      tags:
      - Appointment
  /appointment/cancel/{id}:
    delete:
      consumes:
      - application/json
      description: Cancel scheduled appointment for the logged in patient. You will
        need an 'Authorization' cookie attached with this request.
      parameters:
      - description: Appointment ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SwCancelAppointmentRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrWebResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrWebResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrWebResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrWebResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dto.ErrWebResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrWebResponse'
      summary: Cancel appointment (patient only)
      tags:
      - Appointment
  /appointment/confirm/{id}:
    put:
      consumes:
      - application/json
      description: Confirm appointment and change status to success for the logged
        in admin. You will need an 'Authorization' cookie attached with this request.
      parameters:
      - description: Appointment ID
        in: path
        name: id
        required: true
        type: string
      - description: Appointment details
        in: body
        name: appointmentRequest
        required: true
        schema:
          $ref: '#/definitions/dto.ConfirmAppointmentReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SwCancelAppointmentRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrWebResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrWebResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrWebResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dto.ErrWebResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrWebResponse'
      summary: Confirm appointment (admin only)
      tags:
      - Appointment
  /appointment/email/{email}:
    get:
      consumes:
      - application/json
      description: Find appointment by patient email. You will need an 'Authorization'
        cookie attached with this request.
      parameters:
      - description: Patient Email
        in: path
        name: email
        required: true
        type: string
      - description: Filter by appointment status
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SwFinByEmailAppointmentRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrWebResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrWebResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrWebResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrWebResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrWebResponse'
      summary: Find By Email (owner and admin)
      tags:
      - Appointment
  /clinic:
    get:
      consumes:
      - application/json
      description: List of all clinic.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SwListClinicRes'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrWebResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrWebResponse'
      summary: List of clinic
      tags:
      - Clinic
    post:
      consumes:
      - application/json
      description: Create a new clinic for the logged in admin. You will need an 'Authorization'
        cookie attached with this request.
      parameters:
      - description: Clinic details
        in: body
        name: clinicRequest
        required: true
        schema:
          $ref: '#/definitions/dto.ClinicReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.SwCreateClinicRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrWebResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrWebResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrWebResponse'
      summary: Create clinic (admin only)
      tags:
      - Clinic
  /clinic/{id}:
    delete:
      consumes:
      - application/json
      description: Delete clinic data by clinic ID for the logged in admin. You will
        need an 'Authorization' cookie attached with this request.
      parameters:
      - description: Clinic ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SwDeleteClinicRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrWebResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrWebResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrWebResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrWebResponse'
      summary: Delete By ID (admin only)
      tags:
      - Clinic
    get:
      consumes:
      - application/json
      description: Find clinic by clinic ID.
      parameters:
      - description: Clinic ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SwCreateClinicRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrWebResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrWebResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrWebResponse'
      summary: Find By ID
      tags:
      - Clinic
    put:
      consumes:
      - application/json
      description: Update clinic data by clinic ID for the logged in admin. You will
        need an 'Authorization' cookie attached with this request.
      parameters:
      - description: Clinic ID
        in: path
        name: id
        required: true
        type: string
      - description: Clinic details
        in: body
        name: clinicRequest
        required: true
        schema:
          $ref: '#/definitions/dto.ClinicUpdateReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SwCreateClinicRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrWebResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrWebResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrWebResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrWebResponse'
      summary: Update By ID (admin only)
      tags:
      - Clinic
  /employee/login:
    post:
      consumes:
      - application/json
      description: Login for employee
      parameters:
      - description: Employee Credentials
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.EmployeeLoginReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SwLoginRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrWebResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrWebResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrWebResponse'
      summary: Employee Login
      tags:
      - Default
  /employee/register:
    post:
      consumes:
      - application/json
      description: Register new employee
      parameters:
      - description: Employee Data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.EmployeeRegisterReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.SwUserRegisterRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrWebResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrWebResponse'
      summary: Employee Register
      tags:
      - Default
  /login:
    post:
      consumes:
      - application/json
      description: Login for patient
      parameters:
      - description: Patient Credentials
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.UserLoginReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SwLoginRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrWebResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrWebResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrWebResponse'
      summary: Patient Login
      tags:
      - Default
  /logout:
    get:
      consumes:
      - application/json
      description: Logout the currently authenticated user and clears the authorization
        cookie
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SwLoginRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrWebResponse'
      summary: Logout the user
      tags:
      - Default
  /register:
    post:
      consumes:
      - application/json
      description: Register new patient
      parameters:
      - description: Patient Data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.UserRegisterReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.SwUserRegisterRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrWebResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrWebResponse'
      summary: Patient Register
      tags:
      - Default
swagger: "2.0"
